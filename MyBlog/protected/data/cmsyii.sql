-- phpMyAdmin SQL Dump
-- version 4.1.7
-- http://www.phpmyadmin.net
--
-- Хост: localhost
-- Время создания: Авг 24 2014 г., 21:24
-- Версия сервера: 5.5.36
-- Версия PHP: 5.3.28

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- База данных: `cmsyii`
--

-- --------------------------------------------------------

--
-- Структура таблицы `cms_category`
--

CREATE TABLE IF NOT EXISTS `cms_category` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `title` varchar(250) NOT NULL,
  `position` varchar(30) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=cp1251 AUTO_INCREMENT=10 ;

--
-- Дамп данных таблицы `cms_category`
--

INSERT INTO `cms_category` (`id`, `title`, `position`) VALUES
(6, 'Php', 'left'),
(2, 'Humor', 'top'),
(5, 'News', 'top'),
(7, 'MySQL', 'left'),
(8, 'jQuery', 'left'),
(9, 'Best', 'top');

-- --------------------------------------------------------

--
-- Структура таблицы `cms_commentary`
--

CREATE TABLE IF NOT EXISTS `cms_commentary` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `content` text NOT NULL,
  `page_id` int(10) NOT NULL,
  `created` int(11) NOT NULL,
  `user_id` int(10) DEFAULT NULL,
  `guest` varchar(20) DEFAULT NULL,
  `status` tinyint(4) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=cp1251 AUTO_INCREMENT=7 ;

--
-- Дамп данных таблицы `cms_commentary`
--

INSERT INTO `cms_commentary` (`id`, `content`, `page_id`, `created`, `user_id`, `guest`, `status`) VALUES
(1, 'zcas', 4, 1396012257, 7, NULL, 1),
(2, 'ii bun articol', 4, 1396012916, 7, NULL, 1),
(3, 'hioh', 5, 1397419872, 7, NULL, 1),
(4, 'qr', 10, 1397422682, 7, NULL, 1),
(5, 'blablabla', 10, 1397423122, 7, NULL, 1),
(6, '3comments', 10, 1397423146, 7, NULL, 1);

-- --------------------------------------------------------

--
-- Структура таблицы `cms_page`
--

CREATE TABLE IF NOT EXISTS `cms_page` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `title` varchar(250) NOT NULL,
  `content` text NOT NULL,
  `created` int(11) NOT NULL,
  `status` tinyint(1) NOT NULL,
  `category_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=cp1251 AUTO_INCREMENT=12 ;

--
-- Дамп данных таблицы `cms_page`
--

INSERT INTO `cms_page` (`id`, `title`, `content`, `created`, `status`, `category_id`) VALUES
(5, '5 Tips for Coding Cleaner PHP', '<p>\r\n	PHP is lovely, though if you ever work with other people having good code is important. Here are some tips to improve your code.</p>\r\n<h2>\r\n	Comment &amp; Document</h2>\r\n<p>\r\n	It&rsquo;s really important that people understand why you are doing certain things in certain ways. Adding a quick comment above sections of code should be adequate, but documenting classes and functions (Even if it&rsquo;s in a Wiki) is fantastic.</p>\r\n<h2>\r\n	Give Variables, Functions and Classes Meaningful names</h2>\r\n<p>\r\n	Nothing is worse than trying to figure out what a function called &ldquo;SIDFE()&rdquo; does. Give everything a name that if someone else looked at it, they could figure out what it does. The above is a real example I have come across while adjusting a clients website, if the other programmer had called it something like Scan_Incomming_Data_For_Evil() it would have been a lot more straightforward.</p>\r\n<h2>\r\n	White space</h2>\r\n<p style="text-align: center;">\r\n	<img alt="" height="300" src="/upload/userfiles/images/29f06bb76c26786ee61cebe4b9b8d4c9.png" width="400" /></p>\r\n<p style="text-align: center;">\r\n	<em>As you can see, a little space here and there makes life a lot easier.</em></p>\r\n<p>\r\n	No one likes to have to search for the start of a function. Make sure you indent your code and keep it easy to read quickly.</p>\r\n<h2>\r\n	Never Delete &ndash; Comment out</h2>\r\n<p>\r\n	&nbsp;</p>\r\n<p>\r\n	This one is a little hard to grasp, but imagine you just fixed a bug (say 100 lines of code to fix it) and something else has broken. It makes sense to be able to go back and see the old code without modification of the new code. Also, doing this helps people see where an old bug was (assuming you comment that the section of code is evil) for future reference.</p>\r\n<div class="gist" id="gist2907562">\r\n	<div class="gist-file">\r\n		<div class="gist-data gist-syntax">\r\n			&nbsp;</div>\r\n	</div>\r\n</div>\r\n', 1396016318, 0, 6),
(6, 'Using Cookies in PHP', '<h2 class="articlePageTitle">\r\n	Introduction to Cookies</h2>\r\n<p>\r\n	&nbsp;</p>\r\n<div class="articleContentx">\r\n	Cookies are one of the most widely misunderstood concepts of Internet surfing to both users and developers. Many people think that cookies are dangerous, insecure &#39;things&#39; that let people get your credit card details and what not. This is, for most cases, completely untrue. To the experienced web developer, cookies present a medium for allowing quicker and more user friendly access to your website.<br />\r\n	<br />\r\n	Cookies are simply files stored in a special temporary location determined by your web browser (like Internet Explorer) which allow public information to be stored for your benefit usually. By public information, this can entail any information that you have entered into forms on websites, or certain non-identifying information such as your IP address or user agent.</div>\r\n<div class="articleContentx">\r\n	<br />\r\n	What makes cookies so special is that, sites can set cookies holding your username and password so that you don&#39;t have to log in again. Or perhaps they will store your email address and favourite colour so that a website can change its colour so that it is more appealing to you. Most importantly though, is that other websites and people cannot access your cookies, hence making them fairly secure.<br />\r\n	<br />\r\n	Having a secure method to store user information doesn&#39;t mean that you can store anything in cookies though. It is widely accepted that you <b>never</b> store a user&#39;s credit card number in a cookie, or a password that will give access to a highly secure area (such as online banking). For areas that require less security like forums, web-mail and unimportant user accounts, it is acceptable to store passwords in encrypted form. The topic of encrypting passwords will be discussed later.</div>\r\n<div class="articleContentx">\r\n	<div class="subTitle">\r\n		How to Set Cookies</div>\r\n	<br />\r\n	<br />\r\n	PHP has a very handy function for us called <span class="word">setcookie()</span>, which does exactly as it says; sets a cookie. The function contains many different parameters, of which almost all are optional, however, a majority are quite important.<br />\r\n	<br />\r\n	<div class="code">\r\n		<span style="background-color:#a9a9a9;">bool&nbsp;setcookie&nbsp;(&nbsp;string&nbsp;name&nbsp;[,&nbsp;string&nbsp;value&nbsp;[,&nbsp;int&nbsp;expire&nbsp;[,&nbsp;string&nbsp;path&nbsp;[,&nbsp;string&nbsp;domain&nbsp;[,&nbsp;bool&nbsp;secure]]]]]&nbsp;)</span></div>\r\n	<p>\r\n		<br />\r\n		<br />\r\n		This function definition shows us that only the <i>name</i> parameter is actually required, however, to do anything useful, we will be using <i>value</i>, <i>expire</i> and sometimes <i>path</i> and <i>domain</i>.</p>\r\n	<p>\r\n		When you set a cookie, you must give it a name and you should give it a value, unless you are removing it. Cookies are also generally set to expire at a certain time (measured in seconds from 1972). This means, after a certain amount of time, a cookie will be deleted and the information lost. This is a means to remove redundant information from your system and to keep everything up to date. A cookie also has to be set for a particular domain and path. This means you can set cookies to only work in certain directories or sub-domains which can provide added security.<br />\r\n		<br />\r\n		We will now create a very simple example of cookie usage. This is one of the most common methods of using cookies, so this should be quite useful.</p>\r\n	<div class="codeRef">\r\n		<var>First Cookie</var></div>\r\n	<div class="codeRef">\r\n		<div class="php">\r\n			<span style="background-color:#a9a9a9;"><span style="background-color:#808080;"><code><span style="color: #0000BB">&lt;?php<br />\r\n			$username&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">&#39;jonny4&#39;</span><span style="color: #007700">;<br />\r\n			<br />\r\n			</span><span style="color: #0000BB">setcookie</span><span style="color: #007700">(</span><span style="color: #DD0000">&#39;username&#39;</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$username</span><span style="color: #007700">);<br />\r\n			</span><span style="color: #0000BB">?&gt;</span></code></span></span></div>\r\n		<div class="php">\r\n			What we do here, is set a cookie called <i>username</i> containing the username <i>jonny4</i>. Now this cookie will exist in the domain and folder that the script is run in. So we are going to assume you run this script in www.example.com. If you wanted to access it from admin.example.com it would not work, and you will find that the cookie does not exist. However, it is possible to access the cookie from www.example.com/test/cookies/ as this is still in the correct domain.<br />\r\n			<br />\r\n			As this cookie does not have an expiry time, then the cookie will be deleted once the user closes their browser. This can be very useful for keeping a user logged in for an indefinite amount of time, however, as soon as they close their browser (hence, have left the site), the cookie is removed.<br />\r\n			<br />\r\n			There are two <b>very</b> important things to abide by when using cookies. Firstly, there are can be no HTML, text or white-space output before calling the <span class="word">setcookie()</span> function. This is due to a &#39;protocol restriction&#39; and you will find that <span class="word">header()</span> and <span class="word">session_start()</span> functions must also follow this rule. More information can be found in the <a href="http://www.phpnerds.com/article/redirecting-users">Redirecting Users</a> article.<br />\r\n			<br />\r\n			The second rule that you must follow, is that cookie will not become available until the next page has loaded. So you cannot set a cookie, and then immediately access it. You must always first refresh or go to another page to get access to the cookie. This is usually a source of many beginner errors when using cookies, but it is simple to follow.<br />\r\n			<br />\r\n			<div class="subTitle">\r\n				Accessing the Cookie</div>\r\n			<br />\r\n			<br />\r\n			Naturally you will want to access the cookie that you have set. With PHP, this is extremely easy and intuitive. Assuming that we have used the above code to set the cookie, and we are now on a new page, we can access the data as follows:<br />\r\n			<br />\r\n			<div class="codeRef">\r\n				<var>Access the cookie data</var></div>\r\n			<div class="codeRef">\r\n				<div class="php">\r\n					<span style="background-color:lime;"><code><span style="color: #0000BB">&lt;?php<br />\r\n					<br />\r\n					</span><span style="color: #FF8000">/*&nbsp;Prints&nbsp;the&nbsp;value&nbsp;stored&nbsp;in&nbsp;the&nbsp;username&nbsp;cookie&nbsp;*/<br />\r\n					</span><span style="color: #007700">echo&nbsp;</span><span style="color: #0000BB">$_COOKIE</span><span style="color: #007700">[</span><span style="color: #DD0000">&#39;username&#39;</span><span style="color: #007700">];<br />\r\n					<br />\r\n					</span><span style="color: #0000BB">?&gt;</span></code></span></div>\r\n				<div class="php">\r\n					This code uses the <span class="word">$_COOKIE</span> superglobal to access any cookies set in the current domain. If we were to run this script, it would output <i>jonny4</i>.<br />\r\n					<br />\r\n					It is essential to note that you cannot modify the <span class="word">$_COOKIE</span> superglobal and expect it to update the value in the cookie. If you want to update the cookie, you must manually do it again using <span class="word">setcookie()</span>, again remembering that there can be no output before calling this function.</div>\r\n			</div>\r\n		</div>\r\n	</div>\r\n</div>\r\n', 1396016779, 0, 6),
(7, 'Importing XML Data into MySQL Tables Using a Stored Procedure', '<p>\r\n	In theory, it would seem that a stored procedure would be the perfect vehicle for importing XML data from a file. In practice, there are several mitigating factors to doing so.&nbsp; For starters, the LOAD XML INFILE and LOAD DATA INFILE statements have not been permitted to run within a Stored Procedure since MySQL v5.0.7.&nbsp; On top of that, there are serious limitations in how dynamic you can make your procs; too many to make them as flexible that you&#39;d need them to be in order to handle a variety of input files.&nbsp; Finally, right now there are no means for mapping XML data to table structures, so you really have to know what&#39;s coming in.&nbsp; But it&#39;s not all bad news. If you&#39;re willing to target an XML file with a rigid and known structure per proc, you can still get a lot of use out of one call.&nbsp;</p>\r\n<h2>\r\n	The Sample Input File and Target Table</h2>\r\n<p>\r\n	For the purposes of today&#39;s article, we&#39;ll be sticking with a simple one-to-one XML file to table mapping.&nbsp; However, the same principles can equally apply to one-to-many, many-to-one, and many-to-many mappings as well.&nbsp;</p>\r\n<p>\r\n	The XML file that we&#39;ll be working with contains a list of applicants, each containing three attributes.&nbsp; The exact structure of the XML data isn&rsquo;t so important; what really matters is that the proc knows what it is!&nbsp; In our test file, each row to be inserted is contained within an &lt;applicant /&gt; tag.&nbsp; Each column is represented by a named attribute.</p>\r\n<pre>&lt;?xml version=&quot;1.0&quot;?&gt;\r\n&lt;applicant_list&gt;\r\n&nbsp; &lt;applicant id=&quot;1&quot; fname=&quot;Rob&quot; lname=&quot;Gravelle&quot;/&gt;\r\n&nbsp; &lt;applicant id=&quot;2&quot; fname=&quot;Al&quot; lname=&quot;Bundy&quot;/&gt;\r\n&nbsp; &lt;applicant id=&quot;3&quot; fname=&quot;Little&quot; lname=&quot;Richard&quot;/&gt;\r\n&lt;/applicant_list&gt;</pre>\r\n<p>\r\n	The target table contains the same three fields, an int ID and two varchars; the ID is the primary key, so it does not allow nulls or duplicate values.&nbsp; The last_name allows duplicates, but not nulls.&nbsp; The first_name field is the most flexible and allows just about any type of data up to 100 characters in length.</p>\r\n<pre>CREATE&nbsp; TABLE `applicants` (&nbsp;&nbsp; \r\n &nbsp;&nbsp; `id`&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NOT NULL ,\r\n &nbsp;&nbsp; `last_name`&nbsp; VARCHAR(100) NOT NULL ,\r\n &nbsp;&nbsp; `first_name` VARCHAR(100) NULL ,&nbsp;&nbsp; \r\n PRIMARY KEY (`id`) );</pre>\r\n<h2>\r\n	The Stored Procedure</h2>\r\n<p>\r\n	Some people have employed User Defined Functions (UDFs) as a means of circumventing MySQL&#39;s imposed limitations.&nbsp; UDFs are typically written in C++ and compiled as object files.&nbsp; Once added to the server, UDFs can be called just like any native MySQL function.&nbsp; While there&#39;s nothing wrong with UDFs, I can&#39;t advocate going that route for a couple of reasons.&nbsp; First, writing C++ code is something usually better suited to an application developer than a Database Administrator.&nbsp;&nbsp; If you really want to take the UDF approach it would probably be better to find an existing one that fits your needs.&nbsp; In particular, I have heard good things about <a href="https://github.com/mysqludf/lib_mysqludf_sys">lib_mysqludf_sys</a>.&nbsp; Written by <a href="http://rpbouman.blogspot.ca/">Roland Bowman</a>, it allows you to perform system calls.&nbsp; The second reason is that, quite frankly,&nbsp; MySQL already provides the tools to get the job done.&nbsp; Using the proc-friendly Load_File() and ExtractValue() functions, we can accomplish everything we need to without resorting to any third-party solutions.&nbsp;</p>\r\n<p>\r\n	The proc accepts two varchar input parameters: the <em>path</em> contains the location of the xml file and the <em>node</em> is the tag drilldown to the applicant data.&nbsp; In our case these would equate to something like the following:</p>\r\n<pre>path: &#39;C:\\\\applicants1.xml&#39;, node: &#39;/applicant_list/applicant&#39;</pre>\r\n<p>\r\n	<em>Note that on Windows platforms, backslashes are used as the path separator, so these must be escaped using another backslash.&nbsp; This is not necessary on UNIX platforms because paths are separated by forward slashes.</em></p>\r\n<p>\r\n	In the proc, Load_File() imports the xml data into a local variable, while ExtractValue() then queries the XML data using XPath.&nbsp; For instance, in the code below, it retrieves a count of applicants from the xml_content variable:</p>\r\n<pre>&nbsp;&nbsp;&nbsp; declare xml_content text;\r\n &nbsp;&nbsp;&nbsp; declare v_row_count int unsigned;&nbsp; \r\n &nbsp;&nbsp;&nbsp; set xml_content = load_file(path);\r\n &nbsp;&nbsp;&nbsp; set v_row_count = extractValue(xml_content, concat(&#39;count(&#39;, node, &#39;)&#39;));&nbsp;&nbsp; </pre>\r\n<h3>\r\n	Iterating Over the XML Records</h3>\r\n<p>\r\n	Chances are that you won&#39;t know how many records will be imported on each run.&nbsp; Therefore the row count is essential to be able to iterate over every XML row.&nbsp; In the while loop we have to increment the row index by one in order to retrieve the current XML row.&nbsp; One specific row can be fetched using the square array brackets [n], where n is the v_row_index.&nbsp; The <em>@*</em> after the last forward slash tells ExtractValue() to fetch the entire contents of the node.&nbsp; We can then access each attribute in the same way as the rows, again using the square array brackets [n].&nbsp;&nbsp; The Insert statement syntax that I used here does not include the column names.&nbsp; As such, each parameter is inserted in order.</p>\r\n<pre>&nbsp;&nbsp;&nbsp; declare v_row_index int unsigned default 0;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp; while v_row_index &lt; v_row_count do&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set v_row_index = v_row_index + 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set v_xpath_row = concat(node, &#39;[&#39;, v_row_index, &#39;]/@*&#39;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; insert into applicants values (\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; extractValue(xml_content, concat(v_xpath_row, &#39;[1]&#39;)),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; extractValue(xml_content, concat(v_xpath_row, &#39;[2]&#39;)),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; extractValue(xml_content, concat(v_xpath_row, &#39;[3]&#39;))\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );\r\n&nbsp;&nbsp;&nbsp; end while;</pre>\r\n<p>\r\n	Here is the full proc code:</p>\r\n<pre>DELIMITER $$\r\nCREATE DEFINER=`root`@`localhost` PROCEDURE `import_applicant_xml`(path varchar(255), node varchar(255))\r\nBEGIN\r\n&nbsp;&nbsp;&nbsp; declare xml_content text;\r\n&nbsp;&nbsp;&nbsp; declare v_row_index int unsigned default 0;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp; declare v_row_count int unsigned;&nbsp; \r\n&nbsp;&nbsp;&nbsp; declare v_xpath_row varchar(255); \r\n&nbsp;\r\n&nbsp;&nbsp;&nbsp; set xml_content = load_file(path);\r\n&nbsp;\r\n&nbsp;&nbsp;&nbsp; -- calculate the number of row elements.&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp; set v_row_count&nbsp; = extractValue(xml_content, concat(&#39;count(&#39;, node, &#39;)&#39;)); \r\n&nbsp;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp; -- loop through all the row elements&nbsp;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp; while v_row_index &lt; v_row_count do&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set v_row_index = v_row_index + 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set v_xpath_row = concat(node, &#39;[&#39;, v_row_index, &#39;]/@*&#39;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; insert into applicants values (\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; extractValue(xml_content, concat(v_xpath_row, &#39;[1]&#39;)),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; extractValue(xml_content, concat(v_xpath_row, &#39;[2]&#39;)),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; extractValue(xml_content, concat(v_xpath_row, &#39;[3]&#39;))\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );\r\n&nbsp;&nbsp;&nbsp; end while;\r\nEND</pre>\r\n<h2>\r\n	Performing a Test Run</h2>\r\n<p>\r\n	Calling the proc is just a matter of using the call command with the proc name and two input parameters.&nbsp;&nbsp; (Remember to escape backslashes in the file path on Windows platforms.)</p>\r\n<pre>MySQL&gt; call import_applicants_xml(&#39;C:\\\\applicants1.xml&#39;, &#39;/applicant_list/applicant&#39;);\r\nMySQL&gt; select * from applicants;\r\n+---+----------+-------------+\r\n |1&nbsp; |Rob&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |Gravelle&nbsp;&nbsp;&nbsp;&nbsp; |\r\n +---+----------+-------------+\r\n |2&nbsp; |Al&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |Bundy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\r\n +---+----------+-------------+\r\n |3&nbsp; |Little&nbsp;&nbsp;&nbsp; |Richard&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\r\n +---+----------+-------------+\r\n 3 row(s) returned</pre>\r\n<h2>\r\n	Conclusion</h2>\r\n<p>\r\n	&nbsp;</p>\r\n<p>\r\n	Today we covered just enough to successfully import a simple XML file using a stored procedure; hardly enough for any sort of production environment.&nbsp; In the next article, we&#39;ll enhance our proc to use a Prepared Statement, include error handling and validation, as well as handle additional XML formats.</p>\r\n', 1396017268, 0, 7),
(8, 'Converting Between Data Types in MySQL', '<p>\r\n	There are a lot of occasions for converting one data type to another.&nbsp; Examples include porting data from one database vendor to another, changing the data type of a column, and temporarily switching between data types for evaluation.&nbsp; All of these can be achieved using MySQL&rsquo;s native CONVERT() and CAST() functions. By the time you&rsquo;re done reading this article, you&rsquo;ll know exactly how to use both.</p>\r\n<h2>\r\n	Implicit Type Conversion</h2>\r\n<p>\r\n	Mixing and matching data types within the same operation will inevitably lead to implicit conversion, whereby MySQL will convert one of the operands to make it the same as the other(s) &ndash; converting apples to apples as it were.&nbsp; Most commonly the expression combines chars or varchars with another data type, such as an int or double.&nbsp;&nbsp;</p>\r\n<p>\r\n	Letting MySQL handle the conversion is not such a bad thing when you know what the data values will be, but sometimes, it may lead to some unexpected results!&nbsp; For instance, adding &ldquo;1&rdquo; to 1 is not an issue because the number &ldquo;1&rdquo; will simply be converted to a numeric type.&nbsp; On the other hand, something like &ldquo;r&rdquo; + 1 becomes less of a sure thing.&nbsp; (For the record, &ldquo;r&rdquo; becomes 0, so that the result will evaluate to 1.)&nbsp; If we issue the SHOW WARNINGS command, we get the following information:</p>\r\n<pre>mysql&gt; SHOW WARNINGS;\r\n+---------+------+-----------------------------------------+\r\n| Level&nbsp;&nbsp; | Code | Message&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\r\n+---------+------+-----------------------------------------+\r\n| Warning | 1292 | Truncated incorrect DOUBLE value: &#39;r&#39; &nbsp;&nbsp;|\r\n+---------+------+-----------------------------------------+\r\n1 row in set (0.00 sec)</pre>\r\n<p>\r\n	In fact, MySQL will attempt to convert all non-numeric data into numeric ones whenever the expression in question utilizes arithmetic operators, which include DIV, /, -, %, MOD, + and *.</p>\r\n<p>\r\n	Conversely, other operations, such as concatenation, require that all data be converted into chars before the operation can be performed:</p>\r\n<pre>mysql&gt; SELECT CONCAT(2,&#39; test&#39;);\r\n+-------------------+\r\n| CONCAT(2,&#39; test&#39;) |\r\n+-------------------+\r\n| &#39;2 test&#39;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\r\n+-------------------+</pre>\r\n<p>\r\n	So far, all of these conversions seem logical and harmless enough, but there are many instances where implicit conversion can lead to some very erratic behavior.&nbsp; Especially problematic types include timestamps, dates, as well as mixed numeric types, such as integers and floats.&nbsp; There are even times where MySQL must convert multiple values but won&rsquo;t know which to convert too.&nbsp; In those cases, you&rsquo;ll get an error if you&rsquo;re lucky.&nbsp; Otherwise, it just might convert to the wrong type.</p>\r\n<h2>\r\n	Explicit Conversion</h2>\r\n<p>\r\n	The reasons outlined above are why you should handle all of your conversions yourself rather than let MySQL do the dirty work for you.&nbsp; That&rsquo;s where the CONVERT() and CAST() functions come in.&nbsp; Both take an expression of any type and produce a result of one of the following data types:</p>\r\n<ul>\r\n	<li>\r\n		BINARY[(N)] &nbsp;&nbsp;(where (N) is the length of the binary data in bytes)</li>\r\n	<li>\r\n		CHAR[(N)]</li>\r\n	<li>\r\n		DATE</li>\r\n	<li>\r\n		DATETIME</li>\r\n	<li>\r\n		TIME</li>\r\n	<li>\r\n		DECIMAL[(M[,D])]&nbsp;&nbsp; (where M is the maximum number of digits [the precision] and D is the number of digits to the right of the decimal point [the scale])</li>\r\n	<li>\r\n		INTEGER [SIGNED or UNSIGNED]</li>\r\n</ul>\r\n<p>\r\n	While both the functions perform the same task, there are a few differences between them to be aware of. Each function is better suited for some conversions, thus yielding better performance. The CONVERT function tends to be better for converting date and time values, fractional numbers, and monetary values. On the other hand, the CAST function is more adept at converting decimals and numeric values, as the function can retain the decimals from the original expressions. Moreover, CAST() utilizes the ANSI standard and is more portable compared to CONVERT function.</p>\r\n<h2>\r\n	The CAST() Function</h2>\r\n<p>\r\n	The syntax of the CAST() function is quite simple:</p>\r\n<pre>CAST(expression AS TYPE)</pre>\r\n<p>\r\n	Before performing the following calculation, MySQL would normally convert the `2` string into an integer. We can explicitly convert the `2` string into an integer ourselves using the CAST() function:</p>\r\n<pre>mysql&gt; SELECT (2 + CAST(&#39;2&#39; AS UNSIGNED))/2;\r\n+--------------------------------+\r\n| (2 + CAST(&#39;2&#39; AS UNSIGNED))/2&nbsp; |\r\n+--------------------------------+\r\n| 2.0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;|\r\n+--------------------------------+</pre><pre>The same goes for string data:</pre><pre>mysql&gt; SELECT CONCAT(&#39;MySQL is number &#39;,CAST(1 AS CHAR));\r\n+---------------------------------------------+\r\n| CONCAT(&#39;MySQL is number &#39;,CAST(1 AS CHAR)) &nbsp;|\r\n+---------------------------------------------+\r\n| MySQL is number 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;|\r\n+---------------------------------------------+</pre>\r\n<h2>\r\n	The CONVERT() Function</h2>\r\n<p>\r\n	The CONVERT() function syntax is similar to CAST() but the expression and result type are supplied via two arguments:</p>\r\n<pre>CONVERT(expr,type)</pre>\r\n<p>\r\n	Here are the previous two examples rewritten to utilize CONVERT ():</p>\r\n<pre>mysql&gt; SELECT (2 + CONVERT(&#39;2&#39;, UNSIGNED))/2;\r\n+----------------------------------+\r\n| (2 + CONVERT(&#39;2&#39;, UNSIGNED))/2 &nbsp;&nbsp;|\r\n+----------------------------------+\r\n| 2.0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|\r\n+----------------------------------+</pre><pre>mysql&gt; SELECT CONCAT(&#39;MySQL is number &#39;,CONVERT(1,CHAR));\r\n+---------------------------------------------+\r\n| <span lang="EN-CA" style="font-family: ''Courier New'';">CONCAT(&#39;MySQL is number &#39;,CONVERT(1,CHAR)) &nbsp;|\r\n+---------------------------------------------+\r\n| <span lang="EN-CA">MySQL is number 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\r\n+---------------------------------------------+</span></span></pre>\r\n<h2>\r\n	Using the CAST() and CONVERT() Functions in Queries</h2>\r\n<p>\r\n	The CAST() and CONVERT() functions are often used to return a value with a specified type for comparison in the WHERE, JOIN, and HAVING clauses.&nbsp; One such case involves stored procedures that accept date strings.&nbsp; Here&rsquo;s one that fetches invoices between a given date range:</p>\r\n<pre>CREATE PROCEDURE `fetch_invoices`(in_start_date char(11),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in_end_date &nbsp;&nbsp;char(11))\r\nBEGIN\r\n&nbsp; SELECT invoice_number,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;order_date\r\n&nbsp; FROM &nbsp;&nbsp;orders\r\n&nbsp; WHERE &nbsp;order_date BETWEEN in_start_date AND in_end_date;\r\nEND</pre>\r\n<p>\r\n	Unfortunately, the above code is doomed to fail, as chars are unsuitable for date range queries.&nbsp; Therefore, we need to apply the Convert() function on the date strings to transform them into proper date objects:</p>\r\n<pre>SELECT invoice_number,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; order_date\r\nFROM &nbsp;&nbsp;orders\r\nWHERE &nbsp;order_date BETWEEN CONVERT (in_start_date, DATETIME) \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;AND &nbsp;&nbsp;&nbsp;&nbsp;CONVERT (in_end_date, &nbsp;&nbsp;DATETIME);</pre>\r\n<h2>\r\n	Converting Between Character Sets</h2>\r\n<p>\r\n	One very particular use of both the Cast() the Convert() functions is to convert from one character set to another. The default character set in MySQL is latin1. If you want to store characters from multiple languages in a single column, you can use Unicode character sets, which is utf8 or ucs2.</p>\r\n<p>\r\n	The syntax for Cast() is:</p>\r\n<pre>CAST(character_string AS character_data_type CHARACTER SET charset_name)</pre>\r\n<p>\r\n	Here&rsquo;s an example:</p>\r\n<pre>mysql&gt; SELECT CAST(_latin1&#39;This is a test&#39; AS CHAR CHARACTER SET utf8);</pre><pre>+----------------------------------------------------------+\r\n| CAST(_latin1&#39;This is a test&#39; AS CHAR CHARACTER SET utf8) |\r\n+----------------------------------------------------------+\r\n| This is a test&nbsp;&nbsp; |\r\n+----------------------------------------------------------+</pre>\r\n<p>\r\n	The &#39;&#39;_latin1&#39;&#39; is the <em>charset name</em> (also known as an <em>introducer</em>). It tells the parser that the string that follows is in character set &#39;&#39;X&#39;&#39;. The introducer does not cause any conversion, merely helps MySQL know what character set it&rsquo;s converting from.&nbsp; Note that you may include a space between it and the value if you like.</p>\r\n<p>\r\n	The syntax for convert is:</p>\r\n<pre>CONVERT(expr USING transcoding_name)</pre>\r\n<p>\r\n	As the following example shows, Convert() is a great way to convert data that was encoded in a given character set when written to disk into another:</p>\r\n<pre>SELECT CONVERT(_latin1&#39;M&uuml;ller&#39; USING utf8);\r\nINSERT INTO utf8_table (utf8_column)\r\n&nbsp;&nbsp;&nbsp; SELECT CONVERT(latin1_field USING utf8) FROM latin1_table;</pre>\r\n<h2>\r\n	Conclusion</h2>\r\n<p>\r\n	&nbsp;</p>\r\n<p>\r\n	You can never go wrong by taking charge of data type conversion using CAST and CONVERT, rather than letting MySQL handle it for you.&nbsp; Make CAST your <em>go-to</em> function for conversion and CONVERT for other tasks that are better suited for it.</p>\r\n', 1396017398, 0, 7),
(9, 'Assigning Roles to MySQL Users', '<p>\r\n	Ever since Oracle became the owner of MySQL when it acquired Sun Microsystems in 2010, improvements to the software haven&rsquo;t been as forthcoming as one might hope.&nbsp; In fact, some critics have gone so far as to contend that Oracle is willfully &ldquo;<a href="http://techcrunch.com/2012/08/18/oracle-makes-more-moves-to-kill-open-source-mysql/">trying to make it as difficult as possible to use MySQL</a>&rdquo;.&nbsp; I can&rsquo;t say for sure, but I do know that some features have been a long time coming.&nbsp; Case in point, User Role support was originally slated for the MySQL 5.0 release.&nbsp; Fast-forward to the present, there still doesn&rsquo;t seem to be anything like groups in MySQL. According to Oracle, we can expect it to arrive for MySQL 7.0 (WL#988)!&nbsp; Until then, this article presents a few software offerings that may help tide you over.</p>\r\n<p>\r\n	Where there are gaps in application functionality, you can always expect someone to step up and fill the void.&nbsp; MySQL User Roles is no exception.&nbsp; Here are a just a few that I was able to find.</p>\r\n<h3 style="margin-right: 13.05pt;">\r\n	<a href="http://code.google.com/p/google-mysql-tools/">google-mysql-tools</a></h3>\r\n<p>\r\n	Is there any pie that Google doesn&rsquo;t have a couple of fingers in?&nbsp; (Apparently not.)&nbsp; Google-mysql-tools contain several tools for managing, maintaining, and improving the performance of MySQL databases.&nbsp;&nbsp; User Roles support is bundled in the permissions_lib package.&nbsp; Others include pylib/db.py, which allows parallel query execution, and parser_lib, a library that can parse SQL statements and apply rules based on the parsed output.&nbsp; The tools are written in python, so they require the <a href="http://sourceforge.net/projects/mysql-python/">MySQLdb</a> MySQL database connector to run.</p>\r\n<p>\r\n	Google-mysql-tools add a new table called mysql.mapped_user to define mapped users. This table does not have a privileges column <em>per se</em>. Instead, each row references an account name from the mysql.user table that provides the privileges. &nbsp;Entries in the mysql.user table are then reassigned to represent roles when there are entries from mysql.mapped_user that reference them.&nbsp;&nbsp; Hence, one row in mysql.user may be referenced by multiple rows in the mysql.mapped_user table.&nbsp; In a nutshell, entries in the mysql.user table are reused for roles when there are entries from mysql.mapped_user that reference them.</p>\r\n<p>\r\n	Here is some sample python code that illustrates how to utilize user privileges using google-mysql-tools:</p>\r\n<pre>SetAllowedFields([&#39;ssl_cipher&#39;,\r\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;x509_issuer&#39;,\r\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;x509_subject&#39;])\r\n \r\n base_tmpl = (Account(ssl_cipher=&#39;&#39;, x509_issuer=&#39;&#39;, x509_subject=&#39;&#39;)\r\n .GrantPrivileges(database=&#39;test&#39;, privileges=SELECT | INSERT | UPDATE | DELETE | CREATE | DROP)\r\n .AddAllowedHost(hostname_pattern=&#39;%&#39;))\r\n \r\n (base_tmpl.Clone(username=&#39;root&#39;,\r\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # password=&#39;test&#39;,\r\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; password_hash=&#39;*F3A2A51A9B0F2BE2468926B4132313728C250DBF&#39;)\r\n .GrantPrivileges(privileges=ALL_PRIVILEGES)\r\n .Export(set_name=&#39;primary&#39;)\r\n .Export(set_name=&#39;replica&#39;))\r\n \r\n </pre>\r\n<h3>\r\n	<a href="http://www.securich.com/">SecuRich</a></h3>\r\n<p>\r\n	SecuRich is an Open Source project licensed under GPLv2 that provides customizable user roles, password expiry and password history. &nbsp;The product consists of a database that contains some pre-defined tables and stored procedures that manage roles.</p>\r\n<h4>\r\n	Using SecuRich</h4>\r\n<p>\r\n	The first step is to switch to the securich database:</p>\r\n<pre>mysql&gt; use securich; \r\n\r\n</pre>\r\n<p>\r\n	To add a new role, call the create_update_role stored procedure with the command, name, and role:</p>\r\n<pre>mysql&gt; call create_update_role(&#39;add&#39;,&#39;role1&#39;,&#39;select&#39;); </pre>\r\n<p>\r\n	Once a new role has been defined, we can add more privileges to it:</p>\r\n<pre>mysql&gt; call create_update_role(&#39;add&#39;,&#39;role1&#39;,&#39;insert&#39;); \r\nmysql&gt; call create_update_role(&#39;add&#39;,&#39;role1&#39;,&#39;update&#39;);\r\n</pre>\r\n<p>\r\n	Now we&rsquo;re ready to assign the new role to a user:</p>\r\n<pre>mysql&gt; call grant_privileges(&#39;rob&#39;, &#39;sys1.robgravelle.com&#39;, &#39;employees&#39;, &#39;&#39;,\r\n&#39;alltables&#39;, &#39;role1&#39;, &#39;rob@robgravelle.com&#39;);\r\n</pre>\r\n<p>\r\n	The show_full_user_entries proc displays the roles assigned to a particular user and on which database, table and from which host those privileges can be used:</p>\r\n<pre>mysql&gt; call show_full_user_entries(&#39;rob&#39;);\r\n+----------+----------+--------------+-----------+-------+-----------+-------+\r\n| USERNAME | HOSTNAME | DATABASENAME | TABLENAME | ROLE &nbsp;| PRIVILEGE | STATE |\r\n+----------+----------+--------------+-----------+-------+-----------+-------+\r\n| rob &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| 10.0.0.2 | employees&nbsp;&nbsp;&nbsp; | writers&nbsp; &nbsp;| role1 | INSERT &nbsp;&nbsp;&nbsp;| A &nbsp;&nbsp;&nbsp;&nbsp;|\r\n| rob &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| 10.0.0.2 | employees&nbsp;&nbsp;&nbsp; | writers&nbsp;&nbsp; | role1 | SELECT &nbsp;&nbsp;&nbsp;| A &nbsp;&nbsp;&nbsp;&nbsp;|\r\n| rob &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| 10.0.0.2 | employees&nbsp;&nbsp;&nbsp; | writers&nbsp;&nbsp; | role1 | UPDATE&nbsp; &nbsp;&nbsp;| A &nbsp;&nbsp;&nbsp;&nbsp;|\r\n+----------+----------+--------------+-----------+-------+-----------+-------+</pre>\r\n<p>\r\n	Other procs such as set_password, rename_user, and clone_user are geared towards user data rather than roles, but since users and their roles are closely linked, user management must also be performed via the SecuRich interface:</p>\r\n<pre>mysql&gt; call set_password(&#39;rob&#39;, &#39;10.0.0.2&#39;, &#39;2f76754c4ef43ded7a&#39;, &#39;password123&#39;);\r\nmysql&gt; call rename_user(&#39;rob&#39; , &#39;rod&#39; , &#39;rod@robgravelle.com&#39;);\r\nmysql&gt; call clone_user(&#39;rob&#39;, &#39;10.0.0.2&#39;, &#39;robert&#39; , &#39;10.0.0.2&#39;, &#39;robert@robgravelle.com&#39;);</pre>\r\n<p>\r\n	SecuRich is available for MySQL 5.1 or higher on any MySQL platform.&nbsp;</p>\r\n<h3>\r\n	<a href="http://dev.mysql.com/downloads/tools/workbench/">MySQL Workbench</a></h3>\r\n<p>\r\n	Like google-mysql-tools, the MySQL Workbench doesn&#39;t create roles as such but provides a role-like interface to the model.&nbsp; Hence, the underlying code isn&#39;t creating roles but making direct grants to users in batches.</p>\r\n<p>\r\n	User roles fall under the Server Administration heading on the right side of the main screen.&nbsp;</p>\r\n<ul>\r\n	<li>\r\n		Right-click the Server Instance from the list and select Manage Instance from the popup menu to open the Admin tab.&nbsp; You&rsquo;ll have to click on New Server Instance below the listbox if you don&rsquo;t have any active instances.&nbsp;</li>\r\n</ul>\r\n<p>\r\n	<em>Note that your mysqld.exe daemon must be running as a service in order to use the MySQL Workbench Server Administration feature.</em></p>\r\n<p>\r\n	&nbsp;</p>\r\n<ul>\r\n	<li>\r\n		On the Admin screen, click on Users and Privileges under the Security heading on the left and click on the first tab, named &ldquo;Server Access Management&rdquo; to view the User Accounts information.&nbsp;</li>\r\n</ul>\r\n', 1396017487, 0, 7),
(10, ' Why to use jQuery?', '<p>\r\n	<img align="left" alt="" height="188" src="/upload/userfiles/images/362fee8de24ddf4aa8cef73d087e7c02.jpg" width="300" /></p>\r\n<h3>\r\n	<strong>Why to use jQuery?</strong></h3>\r\n<p>\r\n	It&rsquo;s a very good question why should we use jQuery and not something else?</p>\r\n<ul>\r\n	<li>\r\n		<strong><a name="Itslightweight">Its lightweight</a> -</strong> jQuery is a lightweight library and because of its lightweight characteristics it provideshighperformance, it&rsquo;s a very well written code which is about 32 kb size</li>\r\n	<li>\r\n		<strong><a name="Crossbrowsersupport">Cross browser support</a>&ndash;</strong>jQuery supports cross browser, means while working with JavaScript the most important factor we have to consider is browser whereas while working with jQuerywe are not at all required to worry about browser because JQueryfunctions are completely browser independent</li>\r\n	<li>\r\n		<strong><a name="EasyDomtraversing">Easy Dom traversing</a> -</strong> With the help of jQuery we can find parent or child of any HTML element at any timewithout writing much code.</li>\r\n	<li>\r\n		<strong><a name="EasyPlugins">Easy Plugins</a> -</strong>jQuery is highlyextensible. It let you extend the existing behavior and even you can easily add new behaviors. You can easily find</li>\r\n	<li>\r\n		huge plugins over internet.</li>\r\n	<li>\r\n		<strong><a name="Tested,commonlyusedanddocumented">Tested, commonly used and documented</a> &ndash;</strong> Because of huge popularitynot only you can get answers for most of the jQuery questions easily in forums but also availability of huge documentation makes learning jQuery very easy.</li>\r\n</ul>\r\n', 1396017921, 0, 8),
(11, 'Humor in code', '<pre id="line1"></pre>\r\n<div id="r1PostCPBlock" style="overflow: hidden; background-color: rgb(255, 255, 255); border: medium none; position: absolute; left: -99999px;">\r\n	<p>\r\n		Every once in a while we love to let go of ourself, especially when looking at a screen for hours looking at code you have written like 10 times or more.</p>\r\n	<pre id="line1"></pre>\r\n	<p>\r\n		So from time to time we love to have a good laugh and just do some random funny things. Here is a list of humor in code written by developers</p>\r\n	<pre id="line1"></pre>\r\n	<p>\r\n		Humor code #1</p>\r\n	<pre id="line1"></pre>\r\n	<p>\r\n		&nbsp;</p>\r\n	<div>\r\n		<div class="syntaxhighlighter  php" id="highlighter_670041">\r\n			<table border="0" cellpadding="0" cellspacing="0">\r\n				<tbody>\r\n					<tr>\r\n						<td class="gutter">\r\n							<div class="line number1 index0 alt2">\r\n								<pre id="line1">1</pre></div>\r\n							<div class="line number2 index1 alt1">\r\n								2</div>\r\n							<div class="line number3 index2 alt2">\r\n								3</div>\r\n							<div class="line number4 index3 alt1">\r\n								4</div>\r\n						</td>\r\n						<td class="code">\r\n							<div class="container">\r\n								<div class="line number1 index0 alt2">\r\n									<code class="php keyword">public</code> <code class="php keyword">class</code> <code class="php plain">MohammedAli {</code></div>\r\n								<div class="line number2 index1 alt1">\r\n									<code class="php spaces">&nbsp;&nbsp;</code><code class="php plain">float like_a_butterfly;</code></div>\r\n								<div class="line number3 index2 alt2">\r\n									<code class="php spaces">&nbsp;&nbsp;</code><code class="php plain">string like_a_bee;</code></div>\r\n								<div class="line number4 index3 alt1">\r\n									<code class="php plain">}</code></div>\r\n							</div>\r\n						</td>\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n		</div>\r\n	</div>\r\n	<p>\r\n		&nbsp;</p>\r\n	Read more at <a href="http://blog.cmstutorials.org/reviews/humor-in-code#i0RCKmHZVVaXtMvb.99" style="color: #003399;">http://blog.cmstutorials.org/reviews/humor-in-code#i0RCKmHZVVaXtMvb.99</a></div>\r\n<pre id="line1"><span style="font-family:times new roman, times, serif;">Every once in a while we love to let go of ourself, especially when looking at a screen for hours looking at code you have written like 10 times or more.\r\nSo from time to time we love to have a good laugh and just do some random funny things. Here is a list of humor in code written by developers</span>\r\n<span style="background-color:lime;"><tt>Humor code #1</tt></span>\r\n<span style="background-color:#808080;"><code>public class MohammedAli {\r\n  float like_a_butterfly;\r\n  string like_a_bee;\r\n}</code></span>\r\n<span style="background-color:lime;">Humor code #2</span>\r\n<span style="background-color:#808080;"><code>public class LunchOrder {\r\n</code></span><code>    <span style="background-color:#808080;">double cheeseburger;\r\n    char grilled;\r\n    long drink;\r\n    short cake;</span>\r\n<span style="background-color:#808080;">}</span>\r\n</code></pre><pre id="line1"><code><span style="background-color:lime;">Humor code #3\r\n</span>\r\n<span style="background-color:#808080;">ALTER PROCEDURE ORly \r\nAS</span>\r\n<span style="background-color:#808080;">print &#39; {o,o}&#39;\r\nprint &#39; |)__)&#39;\r\nprint &#39; -<span class="entity">&amp;quot;</span>-<span class="entity">&amp;quot;</span>-&#39;\r\nprint &#39;O RLY?&#39;\r\nprint &#39; &#39;\r\nprint &#39;{o.o}&#39;\r\nprint &#39;|)_(|&#39;\r\nprint &#39;-<span class="entity">&amp;quot;</span>-<span class="entity">&amp;quot;</span>-&#39;\r\nprint &#39;YA RLY&#39;\r\nprint &#39; &#39;\r\nprint &#39; {o,o}&#39;\r\nprint &#39; (__(|&#39;\r\nprint &#39; -<span class="entity">&amp;quot;</span>-<span class="entity">&amp;quot;</span>-&#39;\r\nprint &#39;NO WAI!&#39;</span></code></pre>', 1396020228, 0, 2);

-- --------------------------------------------------------

--
-- Структура таблицы `cms_settings`
--

CREATE TABLE IF NOT EXISTS `cms_settings` (
  `id` tinyint(1) NOT NULL AUTO_INCREMENT,
  `defaultComment` tinyint(1) DEFAULT NULL,
  `defaultUser` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=cp1251 AUTO_INCREMENT=2 ;

--
-- Дамп данных таблицы `cms_settings`
--

INSERT INTO `cms_settings` (`id`, `defaultComment`, `defaultUser`) VALUES
(1, 1, 0);

-- --------------------------------------------------------

--
-- Структура таблицы `cms_user`
--

CREATE TABLE IF NOT EXISTS `cms_user` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `username` varchar(50) NOT NULL,
  `password` varchar(50) NOT NULL,
  `created` int(11) DEFAULT NULL,
  `ban` tinyint(1) DEFAULT NULL,
  `role` tinyint(1) NOT NULL,
  `email` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=cp1251 AUTO_INCREMENT=11 ;

--
-- Дамп данных таблицы `cms_user`
--

INSERT INTO `cms_user` (`id`, `username`, `password`, `created`, `ban`, `role`, `email`) VALUES
(1, 'uasea', 'b6655c144068ccf9286b20ab9159eea014bfbec1', 1395916570, 0, 2, 'uasea@mail.ru'),
(5, 'anton', '14deb5e5e417133e888bf47bb6a3555c9bb7d81c', 1395952454, 0, 1, 'antoha@mail.ru'),
(7, 'admin', 'd033e22ae348aeb5660fc2140aec35850c4da997', 1395952851, 1, 2, 'admin@mail.com'),
(9, 'andron', '6fe8e1f91dc05ee2957bd74c490927bff1da035b', 1395958839, 0, 1, 'antonio@gmail.com');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
